apply plugin: Java8ComponentPlugin

sourceSets {
    java8 {
        compileClasspath = sourceSets.main.compileClasspath
        java {
            srcDirs = sourceSets.main.java.srcDirs
            srcDirs += ["$buildDir/generated/source/proto/main/java"]
            exclude '**/LokiJavaHttpAppender.java'
        }
    }
}

dependencies {
    java8AnnotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.3.0'
}

configurations {
    java8.extendsFrom(api)
}

compileJava8Java {
    sourceCompatibility = 8
    targetCompatibility = 8

    options.compilerArgs = [
            "--release", "8", // Avoid using Java 9+ APIs
            '--enable-preview',
    ]
    // The following line can be omitted on Java 14 and higher
    options.compilerArgs << '-Xplugin:jabel'

    doFirst {
        options.compilerArgs = options.compilerArgs.findAll {
            it != '--enable-preview'
        }
    }
}

java {
    registerFeature('jdk8') {
        usingSourceSet(sourceSets.java8)
        withJavadocJar()
        withSourcesJar()
    }
}

publishing {
    publications {
        mavenJava8(MavenPublication) {
            artifactId = 'loki-logback-appender-jdk8'
            from components.java8
            pom {
                name = 'Java8-compatible version of Logback Appender for Loki'
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava8
}

import javax.inject.Inject

class Java8ComponentPlugin implements Plugin<Project> {
    private final SoftwareComponentFactory softwareComponentFactory

    @Inject
    Java8ComponentPlugin(SoftwareComponentFactory softwareComponentFactory) {
        this.softwareComponentFactory = softwareComponentFactory
    }

    void apply(Project project) {
        def java8Component = softwareComponentFactory.adhoc("java8")
        project.components.add(java8Component)
        def cfg = project.configurations.create("java8") { Configuration cnf ->
            cnf.canBeConsumed = true
            cnf.canBeResolved = false
        }
        java8Component.addVariantsFromConfiguration(cfg) {
            it.mapToMavenScope("compile")
        }
    }
}
