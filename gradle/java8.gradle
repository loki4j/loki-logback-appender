apply plugin: Java8ComponentPlugin

sourceSets {
    java8 {
        // we count on this to be applied after main source set is defined
        compileClasspath = sourceSets.main.compileClasspath
        java {
            srcDirs = sourceSets.main.java.srcDirs
            exclude '**/LokiJavaHttpAppender.java'
        }
    }
    java8Test {
        compileClasspath = sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.java8.runtimeClasspath + project.configurations.testRuntimeClasspath
        java {
            srcDirs = sourceSets.test.java.srcDirs
            exclude '**/LokiJavaHttpAppenderTest.java'
            exclude '**/integration/**'
        }
    }
}

dependencies {
    java8AnnotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.3.0'
    java8TestAnnotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.3.0'
}

configurations {
    java8.extendsFrom(api)
    java8Test.extendsFrom(testImplementation)
}

compileJava8Java {
    dependsOn ':generateProto'

    sourceCompatibility = 8
    targetCompatibility = 8

    options.compilerArgs = [
            "--release", "8", // Avoid using Java 9+ APIs
            '--enable-preview',
    ]
    // The following line can be omitted on Java 14 and higher
    options.compilerArgs << '-Xplugin:jabel'

    doFirst {
        options.compilerArgs = options.compilerArgs.findAll {
            it != '--enable-preview'
        }
    }
}

compileJava8TestJava {
    dependsOn ':compileJava8Java'

    sourceCompatibility = 8
    targetCompatibility = 8

    options.compilerArgs = [
            "--release", "8", // Avoid using Java 9+ APIs
            '--enable-preview',
    ]
    // The following line can be omitted on Java 14 and higher
    options.compilerArgs << '-Xplugin:jabel'

    doFirst {
        options.compilerArgs = options.compilerArgs.findAll {
            it != '--enable-preview'
        }
    }
}

task java8Test (type: Test) {
    description = 'Run Java 8 tests'

    testClassesDirs = sourceSets.java8Test.output.classesDirs
    classpath = sourceSets.java8Test.runtimeClasspath

    //classpath.forEach { println "$it"};
    //sourceSets.java8Test.output.classesDirs.forEach { println "$it"};

    useJUnit {
        excludeCategories 'com.github.loki4j.SlowTests'
    }

    //shouldRunAfter compileJava8TestJava
}

task java8Jar(type: Jar) {
    dependsOn ':generateProto'
    from sourceSets.java8.output
    archiveAppendix = 'jdk8'
}

publishing {
    publications {
        mavenJava8(MavenPublication) {
            artifactId = 'loki-logback-appender-jdk8'
            from components.java8
            artifact java8Jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = 'Java8-compatible version of Logback Appender for Loki'
                description = 'Loki4j aims to be the fastest and the most lightweight implementation of Logback Appender for Loki'
                url = 'https://github.com/loki4j/loki-logback-appender'
                licenses {
                    license {
                        name = 'BSD Software License, 2-clause version'
                        url = 'https://github.com/loki4j/loki-logback-appender/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'nehaev'
                        name = 'Anton Nehaev'
                        email = "nehaev@gmail.com"
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com/loki4j/loki-logback-appender.git'
                    developerConnection = 'scm:git:git@github.com/loki4j/loki-logback-appender.git'
                    url = 'https://github.com/loki4j/loki-logback-appender'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava8
}

import javax.inject.Inject

class Java8ComponentPlugin implements Plugin<Project> {
    private final SoftwareComponentFactory softwareComponentFactory

    @Inject
    Java8ComponentPlugin(SoftwareComponentFactory softwareComponentFactory) {
        this.softwareComponentFactory = softwareComponentFactory
    }

    void apply(Project project) {
        def java8Component = softwareComponentFactory.adhoc("java8")
        project.components.add(java8Component)
        def cfg = project.configurations.create("java8") { Configuration cnf ->
            cnf.canBeConsumed = true
            cnf.canBeResolved = false
        }
        java8Component.addVariantsFromConfiguration(cfg) {
            it.mapToMavenScope("compile")
        }
    }
}
