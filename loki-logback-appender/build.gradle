plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

group = "com.github.loki4j"
version = "${file("VERSION").text.trim()}"

repositories {
     mavenCentral()
}

dependencies {
    api libs.logback
    implementation project(":loki-client")
    compileOnly libs.bundles.pluggable

    testImplementation project(":testkit")
    testImplementation libs.bundles.pluggable
    testImplementation libs.junit
    testImplementation libs.jackson
    testImplementation libs.logstash
}

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

test {
    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat = "full"
        showStandardStreams = true
    }
    useJUnit {
        excludeCategories 'com.github.loki4j.testkit.categories.SlowTests'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

task integTests(type: Test) {
    description = 'Run integration tests'
    useJUnit {
        includeCategories 'com.github.loki4j.testkit.categories.IntegrationTests'
    }
    maxHeapSize = "2G"
    testLogging.exceptionFormat = "full"
}

task perfTests(type: Test) {
    description = 'Run performance tests'
    useJUnit {
        includeCategories 'com.github.loki4j.testkit.categories.PerformanceTests'
    }
    forkEvery = 1
    maxHeapSize = "3G"
    testLogging.showStandardStreams = true
}

task ciOnlyTests(type: Test) {
    description = 'Run CI-bound tests'
    useJUnit {
        includeCategories 'com.github.loki4j.testkit.categories.CIOnlyTests'
    }
    testLogging.exceptionFormat = "full"
    testLogging.showStandardStreams = true
}

apply from: '../gradle/publishing.gradle'

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'loki-logback-appender'
            pom.name = 'Logback Appender for Loki'
            from components.java
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.deprecation = true
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}
